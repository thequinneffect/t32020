#!/usr/bin/python3
# COMP3311 20T3 Ass3 ... get Name's biography/filmography

import sys
import psycopg2
#from helpers import whatever, functions, you, need

# define any local helper functions here
def lifespan(birth, death):
  if (birth is not None and death is not None):
    return f" ({birth}-{death})"
  elif (death is not None):
    return f" (-{death})"
  elif (birth is not None):
    return f" ({birth}-)"
  else:
    return " (???)"

# set up some globals

usage = "Usage: bio 'NamePattern' [Year]"
db = None

# process command-line args

argc = len(sys.argv)
if (argc < 2):
  print(usage)
  exit(0)
name_regex = sys.argv[1]
year = None
if (argc == 3):
  if (not sys.argv[2].isdigit()):
    print(usage)
    exit(0)
  year = sys.argv[2]

# manipulate database

try:
  db = psycopg2.connect("dbname=imdb")
  cursor = db.cursor()
  get_people = """
  select * 
  from names
  where name ~* %s
  """
  args = [name_regex]
  full_pattern = f"'{name_regex}'"
  if (year is not None):
    get_people = get_people + """
    and birth_year = %s
    """
    args.append(year)
    full_pattern = full_pattern + f" {year}"
  get_people = get_people + """
  order by name, birth_year, id
  """
  cursor.execute(get_people, args)
  if (cursor.rowcount == 0):
    print(f"No name matching {full_pattern}")
  elif (cursor.rowcount == 1):
    name_id, name, birth, death = cursor.fetchone()
    print(f"Filmography for {name_regex}{lifespan(birth, death)}\n===============")
    get_filmography = """
    select m.title, m.start_year, a.played, Null as role
    from movies m
    join acting_roles a on (a.movie_id = m.id and a.name_id = %s)
    join principals p on (p.movie_id = m.id and p.name_id = %s)
    union
    select m.title, m.start_year, Null as played, c.role
    from movies m
    join crew_roles c on (c.movie_id = m.id and c.name_id = %s)
    join principals p on (p.movie_id = m.id and p.name_id = %s)
    order by start_year, title, played, role
    """
    cursor.execute(get_filmography, [name_id]*4)
    curr_movie = None
    for row in cursor.fetchall():
      title, year, played, role = row
      if (title != curr_movie):
        curr_movie = title
        print(f"{title} ({year})")
      if (played is not None):
        print(f" playing {played}")
      else:
        print(f" as {str(role).capitalize()}") # might need .strip?
  else:
    print(f"Names matching {full_pattern}\n===============")
    for row in cursor.fetchall():
      id, name, birth, death = row
      #print(f"id={id}, name={name}, birth={birth}, death={death}")
      name = name + lifespan(birth, death)
      print(f"{name}")
except psycopg2.Error as err:
  print("DB error: ", err)
finally:
  if db:
    db.close()

